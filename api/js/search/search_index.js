var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.614,1,1.614]],["body/controllers/AppController.html",[0,2.485,1,2.485,2,2.711,3,0.661,4,0.661,5,0.563,6,2.711,7,0.661,8,1.459,9,4.913,10,1.962,11,0.05,12,1.01,13,3.361,14,1.152,15,4.258,16,1.494,17,0.661,18,0.767,19,0.661,20,0.387,21,1.01,22,3.361,23,3.361,24,0.039,25,0.039]],["title/modules/AppModule.html",[26,1.229,27,1.614]],["body/modules/AppModule.html",[1,2.276,2,2.702,3,0.463,4,0.463,5,0.394,11,0.051,17,0.995,18,0.537,19,0.463,20,0.271,24,0.031,25,0.031,26,1.489,27,2.864,28,1.046,29,1.489,30,1.899,31,1.899,32,2.369,33,2.073,34,1.955,35,1.374,36,1.374,37,2.354,38,2.274,39,1.899,40,1.374,41,2.354,42,1.195,43,3.35,44,2.354,45,1.899,46,1.374,47,1.374,48,1.148,49,1.899,50,1.899,51,2.354,52,2.354,53,2.274,54,2.354,55,2.354,56,2.354,57,1.598,58,2.354,59,2.354,60,2.354,61,1.899,62,1.899,63,3.35,64,2.354,65,1.598,66,2.354]],["title/modules/AuthModule.html",[26,1.229,32,1.404]],["body/modules/AuthModule.html",[3,0.444,4,0.444,5,0.378,11,0.051,17,0.972,18,0.515,19,0.444,20,0.26,24,0.03,25,0.03,26,1.444,28,1.003,29,1.444,32,2.629,33,2.044,34,1.897,35,1.317,36,1.317,38,2.206,46,1.317,47,1.317,50,1.82,67,1.82,68,1.82,69,1.82,70,2.256,71,2.281,72,2.335,73,2.044,74,2.256,75,2.621,76,2.621,77,2.256,78,1.532,79,3.25,80,1.317,81,1.897,82,2.256,83,1.82,84,2.256,85,2.256,86,2.256,87,2.256,88,1.532,89,2.256,90,2.256,91,1.82,92,2.256,93,1.82,94,2.256]],["title/classes/AuthResolver.html",[20,0.318,81,1.614]],["body/classes/AuthResolver.html",[3,0.487,4,0.487,5,0.415,7,0.487,8,1.191,10,2.028,11,0.05,12,1.206,14,1.191,17,0.855,19,0.487,20,0.285,21,1.044,24,0.032,25,0.032,42,1.259,65,1.683,71,2.109,81,2.028,83,2,95,1.683,96,2,97,2.409,98,2.802,99,4.348,100,1.764,101,2.48,102,2.48,103,1.356,104,1.044,105,0.793,106,1.356,107,2,108,3.506,109,3.475,110,2.48,111,2.802,112,2.538,113,3.475,114,2.48,115,2,116,2,117,2,118,1.683,119,1.683,120,1.683,121,2.48,122,2.48,123,1.259,124,1.447,125,2.48,126,1.447,127,2.48]],["title/injectables/AuthService.html",[71,1.229,128,0.631]],["body/injectables/AuthService.html",[3,0.366,4,0.366,5,0.312,7,0.366,8,0.967,11,0.051,12,1.023,14,0.967,16,1.907,17,0.876,18,0.425,19,0.366,20,0.214,21,1.023,24,0.026,25,0.026,46,1.088,47,1.088,48,0.639,49,1.503,71,1.254,73,1.981,78,1.265,93,1.503,97,2.179,98,2.275,100,1.432,103,1.328,104,1.023,105,0.777,106,1.328,107,2.275,108,3.062,111,1.503,112,2.216,117,1.503,118,1.265,119,1.265,123,1.728,124,1.987,126,1.987,128,0.644,129,0.828,130,1.503,131,2.821,132,1.863,133,4.292,134,1.739,135,1.863,136,1.863,137,2.821,138,3.405,139,1.863,140,1.432,141,2.821,142,1.863,143,1.863,144,2.216,145,2.77,146,1.863,147,2.821,148,1.863,149,2.821,150,1.503,151,1.863,152,1.265,153,1.863,154,1.863,155,1.863,156,1.915,157,1.503,158,1.863,159,1.503,160,2.821,161,1.863,162,1.863,163,1.863,164,1.265]],["title/injectables/GqlAuthGuard.html",[128,0.631,165,1.614]],["body/injectables/GqlAuthGuard.html",[3,0.605,4,0.605,5,0.515,7,0.605,8,1.378,11,0.05,12,0.925,14,1.054,17,0.881,18,0.702,19,0.605,20,0.354,21,0.925,24,0.037,25,0.037,42,1.562,62,2.481,80,1.795,103,1.2,104,0.925,105,0.702,106,1.2,128,0.918,129,1.367,144,1.795,165,2.347,166,3.243,167,2.481,168,4.021,169,4.021,170,3.832,171,3.076,172,3.076,173,3.076,174,2.481,175,3.076,176,2.481,177,3.076,178,3.076]],["title/injectables/JwtStrategy.html",[72,1.404,128,0.631]],["body/injectables/JwtStrategy.html",[3,0.453,4,0.453,5,0.386,7,0.453,8,1.442,11,0.051,12,0.992,14,0.79,17,0.827,18,0.526,19,0.453,20,0.265,21,1.338,24,0.03,25,0.03,46,1.345,47,1.345,72,1.675,80,1.345,88,2.617,91,1.858,97,1.956,100,1.956,103,0.899,104,0.693,105,0.526,106,0.899,128,0.753,129,1.024,140,1.17,150,1.858,157,2.661,159,1.858,174,1.858,179,1.858,180,1.564,181,2.661,182,3.299,183,3.299,184,3.108,185,4.633,186,4.208,187,2.304,188,2.661,189,3.854,190,3.299,191,2.304,192,1.564,193,2.304,194,2.304,195,2.304,196,2.304,197,2.304,198,2.304,199,2.304,200,2.304,201,1.858,202,2.304,203,2.304,204,2.304,205,2.304,206,2.304,207,2.304,208,2.304,209,2.304,210,2.304]],["title/injectables/PasswordService.html",[73,1.229,128,0.631]],["body/injectables/PasswordService.html",[3,0.401,4,0.401,5,0.341,7,0.401,8,1.361,11,0.05,12,1.08,14,1.034,16,2.14,17,0.593,18,0.465,19,0.401,20,0.235,21,1.193,24,0.028,25,0.028,73,1.341,103,1.177,104,0.907,105,0.82,106,1.177,112,2.318,123,1.824,128,0.688,129,0.906,180,2.439,188,2.433,201,2.897,211,1.643,212,2.897,213,4.239,214,3.534,215,1.761,216,3.592,217,3.017,218,3.017,219,3.017,220,4.239,221,2.038,222,4.438,223,4.593,224,3.017,225,2.038,226,1.384,227,1.643,228,1.643,229,3.017,230,2.038,231,3.017,232,3.017,233,3.017,234,3.017,235,2.038,236,2.038,237,2.038]],["title/entities/UserEntity.html",[48,0.948,238,1.877]],["body/entities/UserEntity.html",[3,0.47,4,0.47,5,0.4,7,0.47,10,2.737,11,0.05,12,1.409,16,2.257,17,0.665,19,0.47,20,0.275,24,0.031,25,0.031,48,1.16,57,1.622,65,2.298,104,0.718,105,1.07,118,1.622,119,1.622,140,1.996,164,2.669,181,1.926,214,2.669,215,1.976,226,2.298,238,2.298,239,1.926,240,3.931,241,3.931,242,3.931,243,3.931,244,2.389,245,4.688,246,2.389,247,3.931,248,2.389,249,2.389,250,3.931,251,2.389,252,2.389,253,3.385,254,3.385,255,2.389,256,3.385,257,1.622,258,1.926,259,2.389]],["title/classes/UserResolver.html",[20,0.318,260,1.614]],["body/classes/UserResolver.html",[3,0.511,4,0.511,5,0.435,7,0.511,8,1.23,10,1.517,11,0.051,12,1.079,14,0.89,17,0.947,18,0.593,19,0.511,20,0.299,21,0.781,24,0.033,25,0.033,42,1.319,48,1.52,95,1.764,97,2.088,100,1.822,103,1.401,104,1.079,105,0.819,106,1.401,115,2.095,116,2.095,123,1.319,124,1.517,126,1.517,134,1.879,145,2.437,165,1.517,192,1.764,260,2.095,261,2.095,262,3.59,263,2.598,264,2.598,265,2.598,266,2.598,267,2.598,268,2.095,269,1.764,270,2.598,271,1.764,272,2.598,273,2.598,274,2.598,275,2.598,276,2.598,277,2.598,278,2.598,279,2.598]],["title/injectables/UserService.html",[128,0.631,134,1.079]],["body/injectables/UserService.html",[3,0.39,4,0.39,5,0.332,7,0.39,8,1.013,11,0.051,12,1.259,14,1.342,16,1.57,17,0.77,18,0.452,19,0.39,20,0.228,21,1.177,24,0.027,25,0.027,40,1.157,48,0.679,97,2.539,100,1.5,103,1.528,104,1.177,105,0.894,106,1.528,112,2.731,123,1.006,124,1.157,126,2.286,128,0.674,129,0.881,134,1.153,140,1.5,144,1.725,145,1.346,152,2.007,164,2.007,226,2.399,257,1.346,258,1.598,271,1.346,280,1.598,281,2.955,282,3.917,283,2.955,284,2.955,285,1.982,286,3.917,287,1.982,288,2.955,289,2.955,290,3.534,291,1.982,292,1.982,293,2.955,294,1.982,295,2.955,296,1.982,297,1.982,298,1.982,299,2.955,300,1.982,301,1.982,302,1.982,303,1.982,304,1.982,305,1.982]],["title/modules/UsersModule.html",[26,1.229,33,1.229]],["body/modules/UsersModule.html",[3,0.557,4,0.557,5,0.475,11,0.051,17,0.944,18,0.647,19,0.557,20,0.326,24,0.035,25,0.035,26,1.693,28,1.26,29,1.693,33,2.244,34,2.224,35,1.655,36,1.655,38,1.925,39,2.286,40,1.655,48,0.972,75,3.072,76,3.072,134,2.083,260,2.224,268,2.286,271,1.925,306,2.286,307,2.286,308,2.286,309,2.835,310,2.835,311,2.835]],["title/coverage.html",[312,3.021]],["body/coverage.html",[0,1.586,1,1.586,5,0.455,6,2.191,11,0.049,20,0.426,24,0.034,25,0.034,48,0.931,53,1.845,71,1.207,72,1.379,73,1.207,81,1.586,96,2.191,105,0.62,120,1.845,128,1.079,130,2.191,134,1.06,156,1.845,165,1.586,166,2.191,167,2.191,179,2.191,211,2.191,238,1.845,239,2.191,260,1.586,261,2.191,269,1.845,280,2.191,312,2.191,313,2.717,314,2.717,315,2.717,316,5.213,317,3.702,318,2.191,319,4.21,320,4.21,321,2.717,322,2.191,323,4.521,324,3.702,325,2.717,326,2.717,327,2.191,328,2.717,329,2.717,330,2.191,331,2.717,332,1.845,333,2.717,334,2.717]],["title/dependencies.html",[29,1.474,335,1.873]],["body/dependencies.html",[11,0.051,18,0.513,24,0.03,25,0.03,29,0.999,40,1.313,42,1.142,45,1.813,61,3.066,78,1.527,80,1.313,88,1.527,105,0.513,184,2.614,212,1.813,257,1.527,332,2.201,336,2.249,337,4.847,338,2.249,339,3.242,340,2.249,341,2.249,342,2.249,343,2.249,344,2.249,345,3.242,346,2.614,347,2.249,348,2.249,349,2.249,350,2.249,351,3.242,352,3.801,353,2.249,354,2.249,355,2.249,356,2.249,357,3.242,358,2.249,359,2.249,360,2.249,361,2.249,362,2.249,363,3.801,364,2.249,365,2.249,366,2.249,367,2.249,368,2.249,369,2.249,370,2.249,371,2.249,372,2.249,373,2.249,374,2.249,375,2.249,376,2.249,377,2.249,378,2.249,379,2.249,380,2.249,381,2.249,382,2.249,383,1.813,384,2.249,385,2.249,386,2.249,387,2.249,388,2.249,389,2.249,390,2.249,391,2.249,392,2.249,393,2.249,394,2.249,395,2.249,396,2.249,397,2.249,398,2.249]],["title/miscellaneous/functions.html",[399,1.356,400,2.675]],["body/miscellaneous/functions.html",[7,0.801,11,0.044,24,0.044,25,0.044,330,3.287,332,3.453,399,2.379,400,3.287,401,4.075]],["title/index.html",[7,0.457,402,2.322,403,2.322]],["body/index.html",[11,0.044,24,0.044,25,0.044,404,4.153,405,4.153,406,4.153,407,4.153,408,4.153]],["title/modules.html",[28,1.665]],["body/modules.html",[11,0.042,24,0.042,25,0.042,27,2.266,28,1.725,32,1.97,33,1.725,346,4.018,409,4.982,410,4.982,411,4.982]],["title/overview.html",[412,3.021]],["body/overview.html",[0,1.648,11,0.048,24,0.035,25,0.035,27,2.882,28,1.254,29,1.688,30,2.277,31,2.277,32,2.709,33,2.242,34,2.217,35,1.648,36,1.648,57,1.917,67,2.277,68,2.277,69,2.277,71,2.242,72,2.18,73,1.908,95,1.917,129,1.254,134,1.968,306,2.277,307,2.277,308,2.277,412,2.277,413,2.823,414,3.799,415,2.823,416,2.823]],["title/properties.html",[215,1.937,335,1.873]],["body/properties.html",[11,0.048,24,0.044,25,0.044,215,2.394,417,4.101,418,4.101,419,4.101,420,4.101]],["title/miscellaneous/variables.html",[399,1.356,421,2.675]],["body/miscellaneous/variables.html",[7,0.482,11,0.051,16,1.532,21,1.421,24,0.031,25,0.031,53,2.341,104,0.737,105,0.91,120,2.341,140,1.245,144,1.431,152,1.664,156,2.707,170,2.78,176,3.216,180,1.664,192,2.341,214,1.664,227,3.216,228,3.813,269,2.341,318,1.977,322,1.977,327,1.977,383,2.78,399,1.431,421,1.977,422,2.452,423,2.452,424,2.452,425,3.447,426,2.452,427,4.558,428,2.452,429,2.452,430,3.447,431,2.452,432,2.452,433,2.452,434,3.447,435,2.452,436,2.452,437,2.452,438,2.452,439,2.452,440,2.452,441,2.452,442,2.452,443,2.452,444,2.452,445,2.452,446,2.452,447,2.452,448,2.452,449,2.452]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":316,"title":{},"body":{"coverage.html":{}}}],["0.0.0",{"_index":418,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":391,"title":{},"body":{"dependencies.html":{}}}],["0.12.0",{"_index":398,"title":{},"body":{"dependencies.html":{}}}],["0.3.12",{"_index":396,"title":{},"body":{"dependencies.html":{}}}],["0.3.2",{"_index":384,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":385,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":323,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":317,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":328,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":324,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":329,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":414,"title":{},"body":{"overview.html":{}}}],["1.0.0",{"_index":377,"title":{},"body":{"dependencies.html":{}}}],["1.1.19",{"_index":350,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":321,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":229,"title":{},"body":{"injectables/PasswordService.html":{}}}],["10.0.2",{"_index":354,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":351,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":320,"title":{},"body":{"coverage.html":{}}}],["14.0.1",{"_index":361,"title":{},"body":{"dependencies.html":{}}}],["15.2.0",{"_index":337,"title":{},"body":{"dependencies.html":{}}}],["15.2.1",{"_index":339,"title":{},"body":{"dependencies.html":{}}}],["15.3.0",{"_index":363,"title":{},"body":{"dependencies.html":{}}}],["15.8.1",{"_index":368,"title":{},"body":{"dependencies.html":{}}}],["15.8.5",{"_index":370,"title":{},"body":{"dependencies.html":{}}}],["16.6.0",{"_index":380,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":416,"title":{},"body":{"overview.html":{}}}],["2.11.6",{"_index":372,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":395,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":413,"title":{},"body":{"overview.html":{}}}],["3.12.0",{"_index":375,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":325,"title":{},"body":{"coverage.html":{}}}],["4.0.1",{"_index":386,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":326,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":415,"title":{},"body":{"overview.html":{}}}],["5.1.0",{"_index":378,"title":{},"body":{"dependencies.html":{}}}],["5.2.3",{"_index":379,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":253,"title":{},"body":{"entities/UserEntity.html":{}}}],["7.8.0",{"_index":393,"title":{},"body":{"dependencies.html":{}}}],["8.3.18",{"_index":382,"title":{},"body":{"dependencies.html":{}}}],["8.9.0",{"_index":388,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":352,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":358,"title":{},"body":{"dependencies.html":{}}}],["9.0.3",{"_index":355,"title":{},"body":{"dependencies.html":{}}}],["access/interfaces",{"_index":119,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"entities/UserEntity.html":{}}}],["accesstoken",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["always",{"_index":442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["angular/animations",{"_index":336,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":338,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":340,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":341,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":342,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":343,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":344,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":345,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":348,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":408,"title":{},"body":{"index.html":{}}}],["apollo",{"_index":373,"title":{},"body":{"dependencies.html":{}}}],["apollodriver",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["apollodriverconfig",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["app.controller",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["app.resolver",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":27,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps/.../app.resolver.ts",{"_index":423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.decorator.ts",{"_index":424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../main.ts",{"_index":401,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apps/.../user.decorator.ts",{"_index":422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/app.controller.ts:7",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["apps/backend/api/src/app/app.module.ts",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["apps/backend/api/src/app/app.resolver.ts",{"_index":318,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/auth/auth.module.ts",{"_index":74,"title":{},"body":{"modules/AuthModule.html":{}}}],["apps/backend/api/src/app/auth/decorators/auth.decorator.ts",{"_index":322,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts",{"_index":96,"title":{},"body":{"classes/AuthResolver.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:13",{"_index":110,"title":{},"body":{"classes/AuthResolver.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:18",{"_index":114,"title":{},"body":{"classes/AuthResolver.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:7",{"_index":102,"title":{},"body":{"classes/AuthResolver.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts:10",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts:17",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts:30",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/backend/api/src/app/auth/services/jwt.strategy.ts",{"_index":179,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/services/jwt.strategy.ts:11",{"_index":187,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/backend/api/src/app/auth/services/jwt.strategy.ts:28",{"_index":191,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts",{"_index":211,"title":{},"body":{"injectables/PasswordService.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts:13",{"_index":230,"title":{},"body":{"injectables/PasswordService.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts:19",{"_index":225,"title":{},"body":{"injectables/PasswordService.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts:28",{"_index":221,"title":{},"body":{"injectables/PasswordService.html":{}}}],["apps/backend/api/src/app/users/decorators/user.decorator.ts",{"_index":327,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts",{"_index":239,"title":{},"body":{"entities/UserEntity.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:15",{"_index":255,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:18",{"_index":244,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:21",{"_index":251,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:24",{"_index":246,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:27",{"_index":249,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:9",{"_index":248,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/backend/api/src/app/users/guards/gql.auth",{"_index":166,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/resolvers/user.resolver.ts",{"_index":261,"title":{},"body":{"classes/UserResolver.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/resolvers/user.resolver.ts:16",{"_index":267,"title":{},"body":{"classes/UserResolver.html":{}}}],["apps/backend/api/src/app/users/resolvers/user.resolver.ts:9",{"_index":264,"title":{},"body":{"classes/UserResolver.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts",{"_index":280,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:13",{"_index":292,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:17",{"_index":294,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:21",{"_index":296,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:26",{"_index":291,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:7",{"_index":287,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/users.module.ts",{"_index":309,"title":{},"body":{"modules/UsersModule.html":{}}}],["apps/backend/api/src/main.ts",{"_index":330,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["args",{"_index":446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["args.password",{"_index":449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["args.username",{"_index":448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ast",{"_index":441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ast.kind",{"_index":438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["async",{"_index":97,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["auth/auth.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["authguard",{"_index":173,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["authguard('jwt",{"_index":175,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["authmodule",{"_index":32,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authresolver",{"_index":81,"title":{"classes/AuthResolver.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"coverage.html":{}}}],["authservice",{"_index":71,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":126,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["axios",{"_index":376,"title":{},"body":{"dependencies.html":{}}}],["backend",{"_index":407,"title":{},"body":{"index.html":{}}}],["backend/api",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["bcrypt",{"_index":212,"title":{},"body":{"injectables/PasswordService.html":{},"dependencies.html":{}}}],["bootstrap",{"_index":332,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["bootstrap/ng",{"_index":360,"title":{},"body":{"dependencies.html":{}}}],["browse",{"_index":411,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":346,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["class",{"_index":20,"title":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["classes",{"_index":95,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{},"overview.html":{}}}],["client",{"_index":434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cluster_appmodule",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":67,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":69,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":70,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":68,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":306,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":307,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":308,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":245,"title":{},"body":{"entities/UserEntity.html":{}}}],["column({length",{"_index":252,"title":{},"body":{"entities/UserEntity.html":{}}}],["company/shared/date",{"_index":118,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"entities/UserEntity.html":{}}}],["compare",{"_index":213,"title":{},"body":{"injectables/PasswordService.html":{}}}],["compare(password",{"_index":237,"title":{},"body":{"injectables/PasswordService.html":{}}}],["comparehash",{"_index":217,"title":{},"body":{"injectables/PasswordService.html":{}}}],["comparehash(password",{"_index":219,"title":{},"body":{"injectables/PasswordService.html":{}}}],["compodoc/compodoc",{"_index":349,"title":{},"body":{"dependencies.html":{}}}],["const",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":100,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":101,"title":{},"body":{"classes/AuthResolver.html":{}}}],["constructor(jwtservice",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(userrepository",{"_index":285,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":263,"title":{},"body":{"classes/UserResolver.html":{}}}],["context",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"injectables/GqlAuthGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{},"overview.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["coverage",{"_index":312,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["created",{"_index":240,"title":{},"body":{"entities/UserEntity.html":{}}}],["createdatecolumn",{"_index":243,"title":{},"body":{"entities/UserEntity.html":{}}}],["createparamdecorator((data",{"_index":425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createuser",{"_index":281,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(user",{"_index":289,"title":{},"body":{"injectables/UserService.html":{}}}],["ctx",{"_index":176,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["ctx.getargs()[1",{"_index":447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.getcontext().req",{"_index":178,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["currentuser",{"_index":269,"title":{},"body":{"classes/UserResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data",{"_index":186,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["date",{"_index":427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(ast.value",{"_index":440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(environment.jwt.expiresin).getdate",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["date(value",{"_index":436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{}}}],["decorators/auth.decorator",{"_index":121,"title":{},"body":{"classes/AuthResolver.html":{}}}],["decorators/user.decorator",{"_index":270,"title":{},"body":{"classes/UserResolver.html":{}}}],["default",{"_index":227,"title":{},"body":{"injectables/PasswordService.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":87,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["dependencies",{"_index":29,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":180,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"miscellaneous/variables.html":{}}}],["disable",{"_index":203,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["documentation",{"_index":313,"title":{},"body":{"coverage.html":{}}}],["documentations",{"_index":406,"title":{},"body":{"index.html":{}}}],["driver",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["dynamic",{"_index":347,"title":{},"body":{"dependencies.html":{}}}],["email",{"_index":241,"title":{},"body":{"entities/UserEntity.html":{}}}],["entities",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"entities/UserEntity.html":{},"overview.html":{}}}],["entities/user.entity",{"_index":271,"title":{},"body":{"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["entity",{"_index":238,"title":{"entities/UserEntity.html":{}},"body":{"entities/UserEntity.html":{},"coverage.html":{}}}],["environment",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["environment.connection",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["environment.jwt.expiresin",{"_index":94,"title":{},"body":{"modules/AuthModule.html":{}}}],["environment.jwt.secret",{"_index":91,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["environments/environment",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["eslint",{"_index":202,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eslint/no",{"_index":207,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["executioncontext",{"_index":170,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":93,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["explicit",{"_index":208,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["export",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":76,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":357,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":174,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":193,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":198,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["find",{"_index":282,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid",{"_index":283,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":293,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyusername",{"_index":284,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyusername(username",{"_index":295,"title":{},"body":{"injectables/UserService.html":{}}}],["format",{"_index":443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["function",{"_index":331,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":400,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["getdata",{"_index":9,"title":{},"body":{"controllers/AppController.html":{}}}],["gethash",{"_index":218,"title":{},"body":{"injectables/PasswordService.html":{}}}],["gethash(password",{"_index":224,"title":{},"body":{"injectables/PasswordService.html":{}}}],["getrequest",{"_index":168,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["getrequest(context",{"_index":169,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["getting",{"_index":402,"title":{"index.html":{}},"body":{}}],["gqlauthguard",{"_index":165,"title":{"injectables/GqlAuthGuard.html":{}},"body":{"injectables/GqlAuthGuard.html":{},"classes/UserResolver.html":{},"coverage.html":{}}}],["gqlexecutioncontext",{"_index":172,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["gqlexecutioncontext.create(context",{"_index":177,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["graphql",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["graphqljson",{"_index":444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["graphqlmodule",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forroot",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlscalartype",{"_index":428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guard",{"_index":274,"title":{},"body":{"classes/UserResolver.html":{}}}],["guard.ts",{"_index":167,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"coverage.html":{}}}],["guard.ts:8",{"_index":171,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["guards/gql.auth",{"_index":273,"title":{},"body":{"classes/UserResolver.html":{}}}],["hash",{"_index":223,"title":{},"body":{"injectables/PasswordService.html":{}}}],["hash(password",{"_index":235,"title":{},"body":{"injectables/PasswordService.html":{}}}],["https://github.com/kelektiv/node.bcrypt.js#readme",{"_index":234,"title":{},"body":{"injectables/PasswordService.html":{}}}],["id",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":314,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":199,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":181,"title":{},"body":{"injectables/JwtStrategy.html":{},"entities/UserEntity.html":{}}}],["import",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["injectable",{"_index":128,"title":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":297,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(userentity",{"_index":298,"title":{},"body":{"injectables/UserService.html":{}}}],["interaction",{"_index":182,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["isignauthpayload",{"_index":108,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["isignauthresponse",{"_index":117,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["isvalid",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["iuser",{"_index":256,"title":{},"body":{"entities/UserEntity.html":{}}}],["json",{"_index":383,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwt",{"_index":88,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":197,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":77,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":89,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":72,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kind.string",{"_index":439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["length",{"_index":259,"title":{},"body":{"entities/UserEntity.html":{}}}],["license",{"_index":419,"title":{},"body":{"properties.html":{}}}],["line",{"_index":205,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["login",{"_index":98,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["login(@signin",{"_index":125,"title":{},"body":{"classes/AuthResolver.html":{}}}],["login(signinpayload",{"_index":107,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["logout",{"_index":99,"title":{},"body":{"classes/AuthResolver.html":{}}}],["main",{"_index":404,"title":{},"body":{"index.html":{}}}],["matching",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["metadata",{"_index":390,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":399,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":420,"title":{},"body":{"properties.html":{}}}],["module",{"_index":26,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":28,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["name",{"_index":104,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["nestjs/apollo",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":353,"title":{},"body":{"dependencies.html":{}}}],["nestjs/graphql",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"injectables/GqlAuthGuard.html":{},"classes/UserResolver.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":78,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":80,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":356,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["new",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newuser",{"_index":303,"title":{},"body":{"injectables/UserService.html":{}}}],["next",{"_index":204,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ng",{"_index":359,"title":{},"body":{"dependencies.html":{}}}],["ngrx/effects",{"_index":362,"title":{},"body":{"dependencies.html":{}}}],["ngrx/router",{"_index":364,"title":{},"body":{"dependencies.html":{}}}],["ngrx/store",{"_index":366,"title":{},"body":{"dependencies.html":{}}}],["nrwl/angular",{"_index":367,"title":{},"body":{"dependencies.html":{}}}],["nrwl/nest",{"_index":369,"title":{},"body":{"dependencies.html":{}}}],["null",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":226,"title":{},"body":{"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["object",{"_index":426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":106,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["out",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":412,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":335,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":405,"title":{},"body":{"index.html":{}}}],["param",{"_index":201,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{}}}],["parameters",{"_index":103,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["parseliteral(ast",{"_index":437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parsevalue(value",{"_index":435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["partial",{"_index":290,"title":{},"body":{"injectables/UserService.html":{}}}],["pass",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":184,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":79,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":86,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":195,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":196,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":214,"title":{},"body":{"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["password.service",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordhash",{"_index":220,"title":{},"body":{"injectables/PasswordService.html":{}}}],["passwordservice",{"_index":73,"title":{"injectables/PasswordService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"coverage.html":{},"overview.html":{}}}],["payload",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":209,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":210,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pg",{"_index":387,"title":{},"body":{"dependencies.html":{}}}],["plain",{"_index":222,"title":{},"body":{"injectables/PasswordService.html":{}}}],["playground",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["popperjs/core",{"_index":371,"title":{},"body":{"dependencies.html":{}}}],["primarygeneratedcolumn",{"_index":247,"title":{},"body":{"entities/UserEntity.html":{}}}],["private",{"_index":123,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["privatekey",{"_index":90,"title":{},"body":{"modules/AuthModule.html":{}}}],["promise",{"_index":112,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":215,"title":{"properties.html":{}},"body":{"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"properties.html":{}}}],["provide",{"_index":188,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{}}}],["providers",{"_index":75,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["query",{"_index":115,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["query('login",{"_index":109,"title":{},"body":{"classes/AuthResolver.html":{}}}],["query('logout",{"_index":113,"title":{},"body":{"classes/AuthResolver.html":{}}}],["query('user",{"_index":276,"title":{},"body":{"classes/UserResolver.html":{}}}],["query('user')@useguards(gqlauthguard",{"_index":266,"title":{},"body":{"classes/UserResolver.html":{}}}],["readonly",{"_index":124,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["reflect",{"_index":389,"title":{},"body":{"dependencies.html":{}}}],["repository",{"_index":286,"title":{},"body":{"injectables/UserService.html":{}}}],["req",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["reset",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolve",{"_index":445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resolver",{"_index":116,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["resolver('auth",{"_index":122,"title":{},"body":{"classes/AuthResolver.html":{}}}],["resolver('user",{"_index":275,"title":{},"body":{"classes/UserResolver.html":{}}}],["resolvermap",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["resolvers",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["resolvers/auth.resolver",{"_index":82,"title":{},"body":{"modules/AuthModule.html":{}}}],["resolvers/user.resolver",{"_index":310,"title":{},"body":{"modules/UsersModule.html":{}}}],["results",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["rounds",{"_index":232,"title":{},"body":{"injectables/PasswordService.html":{}}}],["rxjs",{"_index":392,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":231,"title":{},"body":{"injectables/PasswordService.html":{}}}],["saltrounds",{"_index":216,"title":{},"body":{"injectables/PasswordService.html":{}}}],["scalar",{"_index":430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":200,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["see",{"_index":233,"title":{},"body":{"injectables/PasswordService.html":{}}}],["send",{"_index":433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serialize(value",{"_index":431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server",{"_index":374,"title":{},"body":{"dependencies.html":{}}}],["services/auth.service",{"_index":83,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{}}}],["services/jwt.strategy",{"_index":84,"title":{},"body":{"modules/AuthModule.html":{}}}],["services/password.service",{"_index":85,"title":{},"body":{"modules/AuthModule.html":{}}}],["services/user.service",{"_index":268,"title":{},"body":{"classes/UserResolver.html":{},"modules/UsersModule.html":{}}}],["signin",{"_index":120,"title":{},"body":{"classes/AuthResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signinpayload",{"_index":111,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["signinpayload.password",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":92,"title":{},"body":{"modules/AuthModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["standard",{"_index":183,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["started",{"_index":403,"title":{"index.html":{}},"body":{}}],["statements",{"_index":315,"title":{},"body":{"coverage.html":{}}}],["store",{"_index":365,"title":{},"body":{"dependencies.html":{}}}],["strategy",{"_index":194,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":189,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":409,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":410,"title":{},"body":{"modules.html":{}}}],["table",{"_index":334,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":333,"title":{},"body":{"coverage.html":{}}}],["this.authservice.login(signinpayload",{"_index":127,"title":{},"body":{"classes/AuthResolver.html":{}}}],["this.jwtservice.sign(payload",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordservice.comparehash(pass",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.saltrounds",{"_index":236,"title":{},"body":{"injectables/PasswordService.html":{}}}],["this.userrepository.create(user",{"_index":304,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find",{"_index":299,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone",{"_index":300,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":305,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.findonebyid(user.id",{"_index":279,"title":{},"body":{"classes/UserResolver.html":{}}}],["this.userservice.findonebyusername(username",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validateuser(signinpayload.username",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["tools",{"_index":381,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"entities/UserEntity.html":{}}}],["tslib",{"_index":394,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":105,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":257,"title":{},"body":{"entities/UserEntity.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":311,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forroot",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["typepaths",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["typescript",{"_index":206,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["unauthorizedexception",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["unique",{"_index":254,"title":{},"body":{"entities/UserEntity.html":{}}}],["unknown",{"_index":192,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/UserResolver.html":{},"miscellaneous/variables.html":{}}}],["updated",{"_index":242,"title":{},"body":{"entities/UserEntity.html":{}}}],["updatedatecolumn",{"_index":250,"title":{},"body":{"entities/UserEntity.html":{}}}],["useguards",{"_index":272,"title":{},"body":{"classes/UserResolver.html":{}}}],["useguards(gqlauthguard",{"_index":277,"title":{},"body":{"classes/UserResolver.html":{}}}],["user",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["user.id",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.username",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["userentity",{"_index":48,"title":{"entities/UserEntity.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userid",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["username",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":288,"title":{},"body":{"injectables/UserService.html":{}}}],["userresolver",{"_index":260,"title":{"classes/UserResolver.html":{}},"body":{"classes/UserResolver.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["users",{"_index":258,"title":{},"body":{"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["users/entities/user.entity",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["users/services/user.service",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["users/users.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users?.length",{"_index":301,"title":{},"body":{"injectables/UserService.html":{}}}],["users[0",{"_index":302,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":134,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":33,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["validate",{"_index":185,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":190,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{}}}],["value",{"_index":228,"title":{},"body":{"injectables/PasswordService.html":{},"miscellaneous/variables.html":{}}}],["value.toisostring",{"_index":432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":319,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":421,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":417,"title":{},"body":{"properties.html":{}}}],["welcome",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["whoami",{"_index":262,"title":{},"body":{"classes/UserResolver.html":{}}}],["whoami(@currentuser",{"_index":278,"title":{},"body":{"classes/UserResolver.html":{}}}],["whoami(user",{"_index":265,"title":{},"body":{"classes/UserResolver.html":{}}}],["zone.js",{"_index":397,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/app.controller.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { message: string; }\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\n\n\n@Controller()\nexport class AppController {\n  @Get()\n  getData() {\n    return { message: 'Welcome to backend/api!' };\n\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend/api/src/app/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';\nimport { environment } from '../environments/environment';\nimport { UserEntity } from './users/entities/user.entity';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { AppController } from './app.controller';\nimport { resolverMap } from './app.resolver';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      ...environment.connection,\n      entities: [\n        UserEntity,\n      ]\n    }),\n    GraphQLModule.forRoot({\n      driver: ApolloDriver,\n      typePaths: [\"./**/*.graphql\"],\n      context: ({ req }) => ({ req }),\n      playground: true,\n      resolvers: [resolverMap],\n    }),\n    AuthModule,\n    UsersModule\n  ],\n  controllers: [\n    AppController,\n  ],\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            PasswordService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { environment } from '../../environments/environment';\nimport { UsersModule } from '../users/users.module';\nimport { AuthResolver } from './resolvers/auth.resolver';\nimport { AuthService } from './services/auth.service';\nimport { JwtStrategy } from './services/jwt.strategy';\nimport { PasswordService } from './services/password.service';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule.register({\n      defaultStrategy: 'jwt'\n    }),\n    JwtModule.register({\n      privateKey: environment.jwt.secret,\n      signOptions: {\n        expiresIn: environment.jwt.expiresIn\n      }\n    }),\n  ],\n  providers: [\n    AuthService,\n    PasswordService,\n    JwtStrategy,\n    AuthResolver,\n  ],\n  exports: [\n    AuthService,\n    PassportModule,\n  ]\n})\nexport class AuthModule { }\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthResolver.html":{"url":"classes/AuthResolver.html","title":"class - AuthResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/resolvers/auth.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(signInPayload: ISignAuthPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('login')\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInPayload\n                                    \n                                            ISignAuthPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('logout')\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query, Resolver } from \"@nestjs/graphql\";\nimport { ISignAuthPayload, ISignAuthResponse } from \"@company/shared/date-access/interfaces\";\nimport { AuthService } from \"../services/auth.service\";\nimport { SignIn } from \"../decorators/auth.decorator\";\n\n@Resolver('Auth')\nexport class AuthResolver {\n  constructor(\n    private readonly authService: AuthService,\n  ) { }\n\n  @Query('login')\n  async login(@SignIn() signInPayload: ISignAuthPayload): Promise {\n    return await this.authService.login(signInPayload);\n  }\n\n  @Query('logout')\n  async logout(): Promise {\n    return true;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/services/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, userService: UserService, passwordService: PasswordService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/auth/services/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordService\n                                                  \n                                                        \n                                                                        PasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(signInPayload: ISignAuthPayload)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/auth.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInPayload\n                                    \n                                            ISignAuthPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/auth.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { ISignAuthPayload, ISignAuthResponse } from '@company/shared/date-access/interfaces';\nimport { environment } from '../../../environments/environment';\nimport { UserEntity } from '../../users/entities/user.entity';\nimport { UserService } from '../../users/services/user.service';\nimport { PasswordService } from './password.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly userService: UserService,\n    private readonly passwordService: PasswordService\n  ) { }\n\n  async validateUser(username: string, pass: string): Promise> {\n    const user = await this.userService.findOneByUserName(username);\n\n    const isValid = user ? await this.passwordService.compareHash(pass, user.password) : false;\n\n    if (isValid) {\n      delete user.password;\n      return user;\n    }\n\n    return null;\n  }\n\n  async login(signInPayload: ISignAuthPayload): Promise {\n\n    const user = await this.validateUser(signInPayload.username, signInPayload.password);\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    const payload = { username: user.username, userId: user.id };\n\n    return {\n      accessToken: this.jwtService.sign(payload),\n      expiresIn: new Date(environment.jwt.expiresIn).getDate(),\n      id: user.id\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GqlAuthGuard.html":{"url":"injectables/GqlAuthGuard.html","title":"injectable - GqlAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GqlAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/guards/gql.auth-guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRequest\n                        \n                    \n                \n            \n            \n                \ngetRequest(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/guards/gql.auth-guard.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { GqlExecutionContext } from '@nestjs/graphql';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class GqlAuthGuard extends AuthGuard('jwt') {\n\n  getRequest(context: ExecutionContext) {\n    const ctx = GqlExecutionContext.create(context);\n\n    return ctx.getContext().req;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/services/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Implements interaction with standard passport-jwt methods\nand return validate data\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/auth/services/jwt.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            provide super\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/jwt.strategy.ts:28\n                \n            \n\n\n            \n                \n                    Return validate data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { ExtractJwt, Strategy } from 'passport-jwt'\nimport { PassportStrategy } from '@nestjs/passport'\nimport { environment } from '../../../environments/environment'\n\n/**\n * Implements interaction with standard passport-jwt methods\n * and return validate data\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * provide super\n   */\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: environment.jwt.secret,\n    })\n  }\n\n  /**\n   * Return validate data\n   * @param payload\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async validate(payload: any) {\n    return { userId: payload.sub, username: payload.username }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PasswordService.html":{"url":"injectables/PasswordService.html","title":"injectable - PasswordService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PasswordService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/services/password.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Provide methods bcrypt and compare password\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                saltRounds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                compareHash\n                            \n                            \n                                getHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        compareHash\n                        \n                    \n                \n            \n            \n                \ncompareHash(password: string, passwordHash: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/password.service.ts:28\n                \n            \n\n\n            \n                \n                    Compare plain password with password hash\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Plain password\n\n                                    \n                                \n                                \n                                    passwordHash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Password hash\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHash\n                        \n                    \n                \n            \n            \n                \ngetHash(password: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/password.service.ts:19\n                \n            \n\n\n            \n                \n                    Return hash\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Plain password\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        saltRounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/auth/services/password.service.ts:13\n                        \n                    \n\n            \n                \n                    Salt rounds\nSee https://github.com/kelektiv/node.bcrypt.js#readme\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { compare, hash } from 'bcrypt'\n\n/**\n * Provide methods bcrypt and compare password\n */\n@Injectable()\nexport class PasswordService {\n  /**\n   * Salt rounds\n   * @see https://github.com/kelektiv/node.bcrypt.js#readme\n   */\n  private saltRounds = 10\n\n  /**\n   * Return hash\n   * @param password Plain password\n   */\n  getHash(password: string): Promise {\n    return hash(password, this.saltRounds)\n  }\n\n  /**\n   * Compare plain password with password hash\n   * @param password Plain password\n   * @param passwordHash Password hash\n   */\n  compareHash(password: string, passwordHash: string): Promise {\n    return compare(password, passwordHash)\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserEntity.html":{"url":"entities/UserEntity.html","title":"entity - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                updated\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/entities/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/entities/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/entities/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/entities/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/entities/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 50, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/entities/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { IUser } from '@company/shared/date-access/interfaces';\nimport { Column, CreateDateColumn, Entity, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\n\n@Entity({\n    name: 'users'\n})\nexport class UserEntity implements IUser {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        length: 50,\n        unique: true\n    })\n    username: string;\n\n    @CreateDateColumn()\n    created: string;\n\n    @UpdateDateColumn()\n    updated: string;\n\n    @Column()\n    email: string;\n\n    @Column()\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResolver.html":{"url":"classes/UserResolver.html","title":"class - UserResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/resolvers/user.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                whoAmI\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/users/resolvers/user.resolver.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        whoAmI\n                        \n                    \n                \n            \n            \n                \n                    \n                    whoAmI(user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('user')@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/users/resolvers/user.resolver.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query, Resolver } from '@nestjs/graphql';\nimport { UserService } from '../services/user.service';\nimport { CurrentUser } from '../decorators/user.decorator'\nimport { UserEntity } from '../entities/user.entity';\nimport { UseGuards } from '@nestjs/common';\nimport { GqlAuthGuard } from '../guards/gql.auth-guard';\n\n@Resolver('User')\nexport class UserResolver {\n  constructor(\n    private readonly userService: UserService,\n  ) { }\n\n  @Query('user')\n  @UseGuards(GqlAuthGuard)\n  async whoAmI(@CurrentUser() user: UserEntity) {\n    return await this.userService.findOneById(user.id);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/services/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByUserName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/users/services/user.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find()\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByUserName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUserName(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { UserEntity } from \"../entities/user.entity\";\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository\n  ) { }\n\n  async find(): Promise {\n    return await this.userRepository.find();\n  }\n\n  async findOneById(id: number): Promise {\n    return await (this.userRepository.findOne({ where: { id } })) || null;\n  }\n\n  async findOneByUserName(username: string): Promise {\n    const users = await this.userRepository.find({ where: { username } });\n    return users?.length ? users[0] : null\n  }\n\n  async createUser(user: Partial): Promise {\n    const newUser = await this.userRepository.create(user);\n    return this.userRepository.save(newUser)\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend/api/src/app/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserEntity } from './entities/user.entity';\nimport { UserResolver } from './resolvers/user.resolver';\nimport { UserService } from './services/user.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserEntity]),\n  ],\n  providers: [\n    UserService,\n    UserResolver\n  ],\n  exports: [\n    UserService,\n  ],\n})\nexport class UsersModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/backend/api/src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/app.resolver.ts\n            \n            variable\n            resolverMap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/decorators/auth.decorator.ts\n            \n            variable\n            SignIn\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/resolvers/auth.resolver.ts\n            \n            class\n            AuthResolver\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/services/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/services/password.service.ts\n            \n            injectable\n            PasswordService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/decorators/user.decorator.ts\n            \n            variable\n            CurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/entities/user.entity.ts\n            \n            entity\n            UserEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/guards/gql.auth-guard.ts\n            \n            injectable\n            GqlAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/resolvers/user.resolver.ts\n            \n            class\n            UserResolver\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/services/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/backend/api/src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~15.2.0\n        \n            @angular/cdk : ^15.2.1\n        \n            @angular/common : ~15.2.0\n        \n            @angular/compiler : ~15.2.0\n        \n            @angular/core : ~15.2.0\n        \n            @angular/forms : ~15.2.0\n        \n            @angular/material : ^15.2.1\n        \n            @angular/platform-browser : ~15.2.0\n        \n            @angular/platform-browser-dynamic : ~15.2.0\n        \n            @angular/router : ~15.2.0\n        \n            @compodoc/compodoc : ^1.1.19\n        \n            @nestjs/apollo : ^10.2.0\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/graphql : ^10.2.0\n        \n            @nestjs/jwt : ^10.0.2\n        \n            @nestjs/passport : ^9.0.3\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @ng-bootstrap/ng-bootstrap : ^14.0.1\n        \n            @ngrx/effects : ^15.3.0\n        \n            @ngrx/router-store : ^15.3.0\n        \n            @ngrx/store : ^15.3.0\n        \n            @nrwl/angular : 15.8.1\n        \n            @nrwl/nest : 15.8.5\n        \n            @popperjs/core : ^2.11.6\n        \n            apollo-server-express : ^3.12.0\n        \n            axios : ^1.0.0\n        \n            bcrypt : ^5.1.0\n        \n            bootstrap : ^5.2.3\n        \n            graphql : ^16.6.0\n        \n            graphql-tools : ^8.3.18\n        \n            graphql-type-json : ^0.3.2\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.9.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            typeorm : ^0.3.12\n        \n            zone.js : ~0.12.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/backend/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nMain page documentations backend-api\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    1 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n        \n            License : MIT\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CurrentUser   (apps/.../user.decorator.ts)\n                        \n                        \n                            resolverMap   (apps/.../app.resolver.ts)\n                        \n                        \n                            SignIn   (apps/.../auth.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/backend/api/src/app/users/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((data: unknown, ctx: ExecutionContext) => {\n  return ctx;\n})\n                    \n                \n\n\n        \n    \n\n    apps/backend/api/src/app/app.resolver.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        resolverMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  Date: new GraphQLScalarType({\n    name: 'Date',\n    description: 'Date custom scalar type',\n    serialize(value: Date) {\n      return value.toISOString() // Value send to the client\n    },\n    parseValue(value: string) {\n      return new Date(value) // Value from the client\n    },\n    parseLiteral(ast) {\n      if (ast.kind === Kind.STRING) {\n        return new Date(ast.value) // ast value is always in string format\n      }\n      return null\n    },\n  }),\n  JSON: GraphQLJSON\n}\n                    \n                \n\n            \n                \n                    Resolve scalar type Date & JSON\n\n                \n            \n\n        \n    \n\n    apps/backend/api/src/app/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SignIn\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((data: unknown, ctx: ExecutionContext) => {\n  const args = ctx.getArgs()[1];\n  return { username: args.username, password: args.password };\n})\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
